basePath: /api
definitions:
  controllers.LetterCreateInput:
    properties:
      type_id:
        example: 1
        type: integer
      user_id:
        example: 5
        type: integer
    required:
    - type_id
    type: object
  controllers.LetterTypeInput:
    properties:
      description:
        example: Deskripsi surat Test
        type: string
      name:
        example: Surat Test
        type: string
    type: object
  controllers.LoginInput:
    properties:
      email:
        example: admin@mail.com
        type: string
      password:
        example: admin123
        type: string
    type: object
  controllers.RoleInput:
    properties:
      name:
        example: test
        type: string
    type: object
  controllers.SettingCreateInput:
    properties:
      allow_telegram:
        example: "yes"
        type: string
      allow_wa:
        example: "yes"
        type: string
      telegram_chatid:
        example: "123456789"
        type: string
      user_id:
        example: 5
        type: integer
      wa_number:
        example: "6281234567890"
        type: string
    type: object
  controllers.SettingUpdateInput:
    properties:
      allow_telegram:
        example: "no"
        type: string
      allow_wa:
        example: "no"
        type: string
      telegram_chatid:
        example: "1234567890"
        type: string
      wa_number:
        example: "62812345678900"
        type: string
    type: object
  controllers.UserInput:
    properties:
      email:
        example: baru@mail.com
        type: string
      name:
        example: User Baru
        type: string
      password:
        example: password123
        type: string
      role_id:
        example: 3
        type: integer
    type: object
  controllers.UserUpdateInput:
    properties:
      email:
        example: baru@mail.com
        type: string
      name:
        example: User Baru
        type: string
      password:
        example: newpassword123
        type: string
      role_id:
        example: 3
        type: integer
    type: object
  models.Letter:
    properties:
      created_at:
        type: string
      id:
        type: integer
      letterType:
        $ref: '#/definitions/models.LetterType'
      reject_reason:
        type: string
      status:
        type: string
      type_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.LetterType:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.RegisterInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.Role:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Setting:
    properties:
      allow_telegram:
        type: string
      allow_wa:
        type: string
      created_at:
        type: string
      id:
        type: integer
      telegram_chatid:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
      wa_number:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: integer
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API untuk notifikasi pengajuan surat via Telegram & WhatsApp
  title: Surat Notifikasi API
  version: "1.0"
paths:
  /letter_types/:
    get:
      description: Get all letter types (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.LetterType'
            type: array
      security:
      - BearerAuth: []
      summary: Get all letter types
      tags:
      - Letter Types
    post:
      consumes:
      - application/json
      description: Create a new letter type (admin only)
      parameters:
      - description: Letter Type input payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LetterTypeInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LetterType'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new letter type
      tags:
      - Letter Types
  /letter_types/{id}:
    delete:
      description: Delete letter type (admin only)
      parameters:
      - description: Letter Type ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete letter type
      tags:
      - Letter Types
    get:
      description: Get letter type by ID (admin only)
      parameters:
      - description: Letter Type ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LetterType'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get letter type by ID
      tags:
      - Letter Types
    put:
      consumes:
      - application/json
      description: Update letter type (admin only)
      parameters:
      - description: Letter Type ID
        in: path
        name: id
        required: true
        type: integer
      - description: Letter Type update payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LetterTypeInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LetterType'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update letter type
      tags:
      - Letter Types
  /letters/:
    get:
      description: Get all letters (admin & reviewer only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Letter'
            type: array
      security:
      - BearerAuth: []
      summary: Get all letters
      tags:
      - Letters
    post:
      consumes:
      - application/json
      description: Buat pengajuan surat baru (user & admin bisa)
      parameters:
      - description: Letter create payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LetterCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Letter'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new letter
      tags:
      - Letters
  /roles/:
    get:
      description: Get list of all roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create a new role (only admin can access)
      parameters:
      - description: Role input
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RoleInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create new role
      tags:
      - Roles
  /roles/{id}:
    delete:
      description: Delete role (only admin can access)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete role by ID
      tags:
      - Roles
    get:
      description: Get detail of a specific role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get role by ID
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Update role name (only admin can access)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role update input
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RoleInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update role by ID
      tags:
      - Roles
  /settings/:
    get:
      description: Ambil semua data setting (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Setting'
            type: array
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all settings
      tags:
      - Settings
    post:
      consumes:
      - application/json
      description: Buat pengaturan notifikasi baru (admin only)
      parameters:
      - description: Setting create payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.SettingCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Setting'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new setting
      tags:
      - Settings
  /settings/{id}:
    delete:
      description: Hapus setting (admin only)
      parameters:
      - description: Setting ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete setting
      tags:
      - Settings
    get:
      description: Ambil detail setting berdasarkan ID
      parameters:
      - description: Setting ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Setting'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get setting by ID
      tags:
      - Settings
    put:
      consumes:
      - application/json
      description: Ubah data setting (admin only)
      parameters:
      - description: Setting ID
        in: path
        name: id
        required: true
        type: integer
      - description: Setting update payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.SettingUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Setting'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update setting
      tags:
      - Settings
  /users/:
    get:
      description: Get all users (only admin can access)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user (only admin can access)
      parameters:
      - description: User input
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.UserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      description: Delete user (only admin can access)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - Users
    get:
      description: Get user detail by ID (only admin can access)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user data (only admin can access)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update input
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.UserUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login user menggunakan email dan password, menghasilkan JWT token
      parameters:
      - description: Data login user
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - Auth
  /users/register:
    post:
      consumes:
      - application/json
      description: Membuat akun user baru dengan role default "user"
      parameters:
      - description: Data user baru
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/models.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register user baru
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
